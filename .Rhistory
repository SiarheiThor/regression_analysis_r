vif(model_l)
plot(data_l)
plot(data_l$Price)
### Fix the model with Ridge due close
# Load necessary library
library(glmnet)
# Prepare data
data_modified <- data_l[, !(names(data_l) %in% c("Brand", "Model", "Engine.Volume", "Name", "Company"))]
data_modified$Horsepower_Year <- data_l$Horsepower * data_l$Year
data_modified$Miles_Year <- data_l$Miles * data_l$Year
X <- model.matrix(~ . - Price, data = data_modified)
Y <- data_l$Price
# Apply Ridge Regression with cross-validation
set.seed(123)
cv_model <- cv.glmnet(X, Y, alpha = 0, type.measure = "mse")
data_l_clean <- na.omit(data_l)
plot(data_l_clean$Price)
hist(data_l_clean$Location)
hist(data_l_clean$Price)
par(mfrow=c(2,2))
frequency_table <- table(data_l_clean$Location)
print(frequency_table)
summary(data_l)
hist(data_l_clean$Horsepower)
hist(data_l_clean$Price)
hist(data_l_clean$Year)
hist(data_l_clean$Miles)
data_l_filtered <- subset(data_l, Price > 20000)
data_l_clean <- na.omit(data_l_filtered)
summary(data_l_clean)
summary(data_l)
hist(data_l_clean$Price)
hist(data_l_clean$Horsepower)
hist(data_l_clean$Year)
hist(data_l_clean$Miles)
frequency_table <- table(data_l_clean$Location)
print(frequency_table)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l)
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
View(data_l)
# Prepare data
data_modified <- data_l_clean[, !(names(data_l_clean) %in% c("Brand", "Model", "Engine.Volume", "Name", "Company"))]
data_modified$Horsepower_Year <- data_l_clean$Horsepower * data_l_clean$Year
data_modified$Miles_Year <- data_l_clean$Miles * data_l_clean$Year
X <- model.matrix(~ . - Price, data = data_modified)
Y <- data_l$Price
# Apply Ridge Regression with cross-validation
set.seed(123)
cv_model <- cv.glmnet(X, Y, alpha = 0, type.measure = "mse")
Y <- data_l_clean$Price
# Apply Ridge Regression with cross-validation
set.seed(123)
cv_model <- cv.glmnet(X, Y, alpha = 0, type.measure = "mse")
# Best lambda value
best_lambda <- cv_model$lambda.min
print(best_lambda)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean)
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
######## Comparing the two models
# Assuming data_l_clean is your full dataset
set.seed(123) # For reproducibility
sample_size <- floor(0.8 * nrow(data_l_clean))
train_indices <- sample(seq_len(nrow(data_l_clean)), size = sample_size)
train_data <- data_l_clean[train_indices, ]
test_data <- data_l_clean[-train_indices, ]
model_l <- lm(Price ~ . -Brand -Model -Engine.Volume -Name -Company + Horsepower:Year + Miles:Year, data = train_data)
data_modified <- train_data[, !(names(train_data) %in% c("Brand", "Model", "Engine.Volume", "Name", "Company"))]
data_modified$Horsepower_Year <- train_data$Horsepower * train_data$Year
data_modified$Miles_Year <- train_data$Miles * train_data$Year
X_train <- model.matrix(~ . - Price, data = data_modified)
Y_train <- train_data$Price
# Apply Ridge Regression with cross-validation
set.seed(123)
cv_model <- cv.glmnet(X_train, Y_train, alpha = 0, type.measure = "mse")
predictions_l <- predict(model_l, newdata = test_data)
# Split the data into training and testing sets
set.seed(123) # For reproducibility
sample_size <- floor(0.8 * nrow(data_l_clean))
train_indices <- sample(seq_len(nrow(data_l_clean)), size = sample_size)
train_data <- data_l_clean[train_indices, ]
test_data <- data_l_clean[-train_indices, ]
# Fit the Linear Model on Training Data
model_l <- lm(Price ~ . -Brand -Model -Engine.Volume -Name -Company + Horsepower:Year + Miles:Year, data = train_data)
# Prepare Data for Ridge Model
X_train <- model.matrix(~ . -Price -Brand -Model -Engine.Volume -Name -Company + Horsepower:Year + Miles:Year, data = train_data)
Y_train <- train_data$Price
# Apply Ridge Regression with cross-validation
cv_model <- cv.glmnet(X_train, Y_train, alpha = 0, type.measure = "mse")
# Best lambda value for Ridge model
best_lambda <- cv_model$lambda.min
# Prepare Test Data for Predictions
X_test <- model.matrix(~ . -Price -Brand -Model -Engine.Volume -Name -Company + Horsepower:Year + Miles:Year, data = test_data)
# Predictions for the Linear Model
predictions_l <- predict(model_l, newdata = test_data)
# Split the data into training and testing sets
set.seed(123)  # Ensure reproducibility
sample_size <- floor(0.8 * nrow(data_l_clean))
train_indices <- sample(seq_len(nrow(data_l_clean)), size = sample_size)
train_data <- data_l_clean[train_indices, ]
test_data <- data_l_clean[-train_indices, ]
# Fit the Linear Model on Training Data
model_l <- lm(Price ~ . -Brand -Model -Engine.Volume -Name -Company + Horsepower:Year + Miles:Year, data = train_data)
# Prepare matrix for Ridge Model (training)
X_train <- model.matrix(~ . -Price -Brand -Model -Engine.Volume -Name -Company + Horsepower:Year + Miles:Year, data = train_data)
Y_train <- train_data$Price
# Apply Ridge Regression with cross-validation
cv_model <- cv.glmnet(X_train, Y_train, alpha = 0, type.measure = "mse")
# Prepare Test Data for Predictions
# Adjust test_data to match training structure for linear model
test_data_adjusted <- test_data
test_data_adjusted$Horsepower_Year <- test_data$Horsepower * test_data$Year
test_data_adjusted$Miles_Year <- test_data$Miles * test_data$Year
# Predictions for the Linear Model
predictions_l <- predict(model_l, newdata = test_data_adjusted)
# For the linear model: Ensure test_data only includes relevant variables and interactions
test_data_adjusted <- test_data[, names(coef(model_l))]
# Manually add interaction terms as they won't be directly present in coef()
test_data_adjusted$Horsepower_Year <- test_data$Horsepower * test_data$Year
test_data_adjusted$Miles_Year <- test_data$Miles * test_data$Year
# Make predictions with the linear model on the adjusted test data
predictions_l <- predict(model_l, newdata = test_data_adjusted)
# Split the data into training and testing sets
set.seed(123)  # Ensure reproducibility
sample_size <- floor(0.8 * nrow(data_l_clean))
train_indices <- sample(seq_len(nrow(data_l_clean)), size = sample_size)
train_data <- data_l_clean[train_indices, ]
test_data <- data_l_clean[-train_indices, ]
# Removing unnecessary columns from both train_data and test_data
unnecessary_columns <- c("Brand", "Model", "Engine.Volume", "Name", "Company")
train_data <- train_data[, !(names(train_data) %in% unnecessary_columns)]
test_data <- test_data[, !(names(test_data) %in% unnecessary_columns)]
# Adding interaction terms
train_data$Horsepower_Year <- train_data$Horsepower * train_data$Year
train_data$Miles_Year <- train_data$Miles * train_data$Year
test_data$Horsepower_Year <- test_data$Horsepower * test_data$Year
test_data$Miles_Year <- test_data$Miles * test_data$Year
# Fit the Linear Model on Training Data
model_l <- lm(Price ~ . + Horsepower:Year + Miles:Year, data = train_data)
# Prepare matrix for Ridge Model (training)
X_train <- model.matrix(~ . -Price, data = train_data)
Y_train <- train_data$Price
# Apply Ridge Regression with cross-validation
cv_model <- cv.glmnet(X_train, Y_train, alpha = 0, type.measure = "mse")
# Predictions for the Linear Model
predictions_l <- predict(model_l, newdata = test_data)
# Prepare matrix for Ridge Model (testing)
X_test <- model.matrix(~ . -Price, data = test_data)
# Predictions for the Ridge Model
predictions_ridge <- predict(cv_model, s = cv_model$lambda.min, newx = X_test)
# Calculate and Compare RMSE
rmse_l <- sqrt(mean((test_data$Price - predictions_l)^2))
rmse_ridge <- sqrt(mean((test_data$Price - predictions_ridge)^2))
# Output RMSE values for comparison
cat("RMSE for Linear Model:", rmse_l, "\n")
cat("RMSE for Ridge Model:", rmse_ridge, "\n")
install.packages("pxweb")
library(pxweb)
my_stat <- interactive_pxweb()
my_stat
?pxweb
pxweb('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02')
data = pxweb('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02')
data
is.pxweb(x)
is.pxweb(data)
data.matrix()
data = pxweb_get_data('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02')
data = pxweb_get('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02')
data
data = pxweb_get('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02',pxq)
data = pxweb_get('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02')
data
data = pxweb_interactive('https://api.scb.se/OV0104/v1/doris/sv/ssd/START/HE/HE0110/HE0110A/NetInk02')
data
save(data, file = "medeinkomst.RData")
### Adding variables from external dataset
# To load the objects back into R
exteranl_data <- load("medeinkomst.RData")
medel_inkomst_lan <- external_data[grepl("län", external_data$region), ]
external_data
### Adding variables from external dataset
# To load the objects back into R
external_data <- load("medeinkomst.RData")
medel_inkomst_lan <- external_data[grepl("län", external_data$region), ]
external_data <- as.data.frame(external_data)
medel_inkomst_lan <- external_data[grepl("län", external_data$region), ]
medel_inkomst_lan
external_data
external_data
external_data
### Adding variables from external dataset
# To load the objects back into R
external_data <- load("medeinkomst.RData")
external_data
data
type(data)
df <- as.data.frame(data)
df
df <- as.data.frame(data, column.name.type = "text", variable.value.type = "text")
df
head(df)
data
save(data, file = "medeinkomst.csv")
class(data)
df <- data.frame(data)
head(df)
data
df <- data.frame(data$data)
head(df)
save(data, file = "medeinkomst.Rdata")
external_data <- load("medeinkomst.RData")
external_data
save(df, file = "medeinkomst.Rdata")
external_data <- load("medeinkomst.RData")
external_data
head(df)
save(df, file = "medeinkomst.CSV")
head(df)
write.csv(df, "medeinkomst.csv", row.names = FALSE)
external_data <- read.csv("medeinkomst.csv")
external_data
medel_inkomst_lan <- external_data[grepl("län", external_data$region), ]
medel_inkomst_lan
data_l_clean
unique(data_l_clean$Location)
medel_inkomst_lan
medeinkomst <- list(
Stockholm = 415.4,
Dalarna = 313.3,
Västmanland = 325.1,
Skåne = 333.2,
Örebro = 312.1,
Kronoberg = 325.9,
Västernorrland = 314.0,
Göteborg = 337.6,
Kalmar = 309.8,
Södermanland = 318.5,
Halland = 363.8,
Blekinge = 313.1,
Älvsborg = 337.6,
Östergötland = 320.0,
Uppsala = 326.1,
Västerbotten = 317.4,
Jämtland = 325.9,
Skaraborg = 337.6,
Jönköping = 325.0,
Värmland = 316.6,
Norrbotten = 328.2,
Gävleborg = 312.2
)
medeinkomst
data_l_clean
head(data_l_clean)
library(dplyr)
# Converting the list to a named vector for easier mapping
medeinkomst_vector <- unlist(medeinkomst)
# Adding the Mean_income column
data_l_clean_1 <- data_l_clean %>%
mutate(Mean_income = medeinkomst_vector[Location])
# Print the updated dataframe to check
print(data_l_clean_1)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company-Location+Horsepower:Year+Miles:Year, data = data_l_clean_1)
summary(data_l_clean_1)
model_l_num = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company-Location+Horsepower:Year+Miles:Year, data = data_l_clean_1)
summary(model_l_num)
summary(data_l_clean_1)
par(mfrow=c(2,2))
plot(model_l_num)
vif(model_l_num)
df
medel_inkomst_lan <- df[grepl("län", df$region), ]
medel_inkomst_lan
# Sorting the dataframe in descending order based on Medelinkomst..tkr
medel_inkomst_lan_sorted <- medel_inkomst_lan %>%
arrange(desc(Medelinkomst..tkr))
library(ggplot2)
# Creating the horizontal bar plot
ggplot(medel_inkomst_lan_sorted, aes(x = reorder(Region, Medelinkomst..tkr), y = Medelinkomst..tkr)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() + # This makes the bar plot horizontal
labs(x = "Region", y = "Medelinkomst (tkr)", title = "Medelinkomst per Region") +
theme_minimal()
# Creating the horizontal bar plot
ggplot(medel_inkomst_lan_sorted, aes(x = reorder(region, Medelinkomst..tkr), y = Medelinkomst..tkr)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() + # This makes the bar plot horizontal
labs(x = "Region", y = "Medelinkomst (tkr)", title = "Medelinkomst per Region") +
theme_minimal()
ggplot(medel_inkomst_lan_sorted, aes(x = reorder(region, Medelinkomst..tkr), y = Medelinkomst..tkr)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.5) + # Decrease bar size by adjusting width
coord_flip() + # This makes the bar plot horizontal
labs(x = "Region", y = "Medelinkomst (tkr)", title = "Medelinkomst per Region") +
theme_minimal() +
theme(axis.text.y = element_text(size = 12)) # Increase size of region labels
ggplot(medel_inkomst_lan_sorted, aes(x = reorder(region, Medelinkomst..tkr), y = Medelinkomst..tkr)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.6) + # Decrease bar size by adjusting width
coord_flip() + # This makes the bar plot horizontal
labs(x = "Region", y = "Medelinkomst (tkr)", title = "Medelinkomst per Region") +
theme_minimal() +
theme(axis.text.y = element_text(size = 11)) # Increase size of region labels
data <- read.csv('./data_preprocessed/cleaned_data_elbilar.csv')
summary(data)
names(data)
### Alternative dataset
data_l <- read.csv('./data_preprocessed/skrapning_v3_cleaned.csv')
summary(data_l)
name(data_l)
names(data_l)
data_l_filtered <- subset(data_l, Price > 20000)
data_l_clean <- na.omit(data_l_filtered)
summary(data_l_clean)
base_model_el = lm(Pris ~., data = data)
summary(fit_base_model)
model_el = lm(Pris ~+Miltal+Modellår+Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = data)
summary(model_el)
clean_data <- subset(data, select = -c(Datum.i.trafik, Märke, Modell))
#Fit the model using the cleaned dataset
model_el <- lm(Pris ~ ., data = clean_data)
summary(model_el)
par(mfrow=c(2,2))
plot(model_el)
vif(model_el)
### Feature engineering
#Fit the model using the cleaned dataset
int_model_el <- lm(Pris ~ . +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = clean_data)
summary(int_model_el)
par(mfrow=c(2,2))
plot(int_model_el)
vif(int_model_el)
no_outliers_data <- data[-c(49, 75, 159, 193), ]
int_model_el_outl <- lm(Pris ~ . +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = no_outliers_data)
summary(int_model_el_outl)
par(mfrow=c(2,2))
plot(int_model_el_outl)
vif(int_model_el_outl)
no_outliers_data <- clean_data[-c(49, 75, 159, 193), ]
int_model_el_outl <- lm(Pris ~ . +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = no_outliers_data)
summary(int_model_el_outl)
par(mfrow=c(2,2))
plot(int_model_el_outl)
vif(int_model_el_outl)
### Feature engineering
#Fit the model using the cleaned dataset
int_model_el <- lm(Pris ~ . +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = clean_data)
summary(int_model_el)
par(mfrow=c(2,2))
plot(int_model_el)
vif(int_model_el)
#Fit the model using the cleaned dataset
model_el <- lm(Pris ~ ., data = clean_data)
summary(model_el)
par(mfrow=c(2,2))
plot(model_el)
vif(model_el)
### Feature engineering
#Fit the model using the cleaned dataset
int_model_el <- lm(Pris ~ .-Färg-Län +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = clean_data)
summary(int_model_el)
par(mfrow=c(2,2))
plot(int_model_el)
vif(int_model_el)
### Feature engineering
#Fit the model using the cleaned dataset
int_model_el <- lm(Pris ~ .-Färg-Län , data = clean_data) #+Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter
summary(int_model_el)
par(mfrow=c(2,2))
plot(int_model_el)
vif(int_model_el)
no_outliers_data <- clean_data[-c(81,198), ]
int_model_el_outl <- lm(Pris ~ . +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = no_outliers_data)
summary(int_model_el_outl)
int_model_el_outl <- lm(Pris ~ .-Färg-Län +Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter, data = no_outliers_data)
summary(int_model_el_outl)
par(mfrow=c(2,2))
plot(int_model_el_outl)
vif(int_model_el_outl)
data[81, ]
### Feature engineering
#Fit the model using the cleaned dataset
int_model_el <- lm(Pris ~ .-Färg-Län , data = clean_data) #+Miltal:Modellår+Hästkrafter:Modellår+Hästkrafter
summary(int_model_el)
par(mfrow=c(2,2))
plot(int_model_el)
vif(int_model_el)
### Alternative dataset
data_l <- read.csv('./data_preprocessed/skrapning_v3_cleaned.csv')
summary(data_l)
names(data_l)
data_l_filtered <- subset(data_l, Price > 20000)
data_l_clean <- na.omit(data_l_filtered)
summary(data_l_clean)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company, data = data_l_clean) #+Horsepower:Year+Miles:Year
summary(model_l)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company-Location, data = data_l_clean) #+Horsepower:Year+Miles:Year
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company, data = data_l_clean) #+Horsepower:Year+Miles:Year
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
vif(model_l_int)
### adjusting model
model_l_int = lm(I(Price^0.5) ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
vif(model_l_int)
### adjusting model
model_l_int = lm(I(ln(Price)) ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
### adjusting model
model_l_int = lm(I(log(Price)) ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
vif(model_l_int)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
model_l_log = lm(I(log(Price)) ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_log)
par(mfrow=c(2,2))
plot(model_l_log)
vif(model_l_log)
model_l_log = lm(I(log(Price)) ~.-Brand-Model-Engine.Volume-Name-Company+Miles:Year, data = data_l_clean) #
summary(model_l_log)
data_l_clean[4273, ]
data_l_clean[8287, ]
data_l_clean[10736, ]
data_l_clean[1, ]
summary(data_l_clean)
model_l_log = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company+Miles:Year, data = data_l_clean) #
summary(model_l_log)
par(mfrow=c(2,2))
plot(model_l_log)
vif(model_l_log)
data_l[4273,]
data_l[8287,]
data_l[10736,]
external_data <- read.csv("medeinkomst.csv")
external_data
medel_inkomst_lan <- external_data[grepl("län", external_data$region), ]
medel_inkomst_lan
unique(data_l_clean$Location)
medeinkomst <- list(
Stockholm = 415.4,
Dalarna = 313.3,
Västmanland = 325.1,
Skåne = 333.2,
Örebro = 312.1,
Kronoberg = 325.9,
Västernorrland = 314.0,
Göteborg = 337.6,
Kalmar = 309.8,
Södermanland = 318.5,
Halland = 363.8,
Blekinge = 313.1,
Älvsborg = 337.6,
Östergötland = 320.0,
Uppsala = 326.1,
Västerbotten = 317.4,
Jämtland = 325.9,
Skaraborg = 337.6,
Jönköping = 325.0,
Värmland = 316.6,
Norrbotten = 328.2,
Gävleborg = 312.2
)
head(data_l_clean)
library(dplyr)
# Converting the list to a named vector for easier mapping
medeinkomst_vector <- unlist(medeinkomst)
# Adding the Mean_income column
data_l_clean_1 <- data_l_clean %>%
mutate(Mean_income = medeinkomst_vector[Location])
# Print the updated dataframe to check
print(data_l_clean_1)
summary(data_l_clean_1)
model_l_log_ext = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company+Miles:Year, data = data_l_clean) #
summary(model_l_log_ext)
model_l_log_ext = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company+Miles:Year, data = data_l_clean_1) #
summary(model_l_log_ext)
model_l_log_ext = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company-Location+Miles:Year, data = data_l_clean_1) #
summary(model_l_log_ext)
par(mfrow=c(2,2))
plot(model_l_log_ext)
vif(model_l_log_ext)
plot(model_l_log$Price)
plot(data_l_clean$Price)
hist(data_l_clean$Price)
hist(log(data_l_clean$Price))
par(mfrow=c(2,1))
hist(data_l_clean$Price)
hist(log(data_l_clean$Price))
par(mfrow=c(1,2))
hist(data_l_clean$Price)
hist(log(data_l_clean$Price))
