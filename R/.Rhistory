library(ggplot2)
library(MASS)
library(leaps)
library(car)
library(Metrics)
data <- read.csv('./data_preprocessed/cleaned_data_elbilar.csv')
data <- read.csv('~/Documents/EC_utbildning/R/regression_analysis_R/data_preprocessed/cleaned_data_elbilar.csv')
summary(data)
names(data)
plot(Modellår~Miltal, data=data)
plot(Pris~I(Modellår*Hästkrafter), data=data)
plot(Pris~I(Modellår), data=data)
plot(Pris~I(Hästkrafter), data=data)
plot(Pris~I(Miltal), data=data)
base_model_el = lm(Pris ~., data = data)
summary(fit_base_model)
summary(base_model_el)
### Alternative dataset
data_l <- read.csv('~/Documents/EC_utbildning/R/regression_analysis_R/data_preprocessed/skrapning_v3_cleaned.csv')
summary(data_l)
names(data_l)
data_l_filtered <- subset(data_l, Price > 20000)
data_l_clean <- na.omit(data_l_filtered)
summary(data_l_clean)
hist(data_l_clean$Price)
hist(data_l_clean$Horsepower)
hist(data_l_clean$Year)
hist(data_l_clean$Miles)
hist(log(data_l_clean$Miles))
frequency_table <- table(data_l_clean$Location)
print(frequency_table)
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company, data = data_l_clean) #+Horsepower:Year+Miles:Year
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company, data = data_l_clean) #+Horsepower:Year+Miles:Year
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
corr(data_l_clean$Miles, data_l_clean$Year)
corr(data_l_clean$Miles, data_l_clean$Year)
cor(data_l_clean$Miles, data_l_clean$Year)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+I(Miles/Year), data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Year+Miles:Year, data = data_l_clean) #
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
vif(model_l_int)
summary(data_l_clean_1)
summary(model_l_int)
anova(model_l_int)
library(ggplot2)
library(MASS)
library(leaps)
library(car)
library(Metrics)
### Alternative dataset
data_l <- read.csv('~/Documents/EC_utbildning/R/regression_analysis_R/data_preprocessed/skrapning_v3_cleaned.csv')
summary(data_l)
names(data_l)
data_l_filtered <- subset(data_l, Price > 20000)
data_l_clean <- na.omit(data_l_filtered)
summary(data_l_clean)
hist(data_l_clean$Price)
hist(data_l_clean$Horsepower)
hist(data_l_clean$Year)
hist(data_l_clean$Miles)
hist(log(data_l_clean$Miles))
model_l = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company, data = data_l_clean) #+Horsepower:Year+Miles:Year
summary(model_l)
par(mfrow=c(2,2))
plot(model_l)
vif(model_l)
cor(data_l_clean$Miles, data_l_clean$Year)
# Adding an age column
data_l_clean$data_l_clean <- 2024 - data_l_clean$year
summary(data_l_clean)
# Adding an age column
data_l_clean$Age <- 2024 - data_l_clean$Year
plot(Price~Age, data=data_l_clean)
plot(Price~Age*Miles, data=data_l_clean)
plot(Price~I(Age*Miles), data=data_l_clean)
plot(Price~ln(Age), data=data_l_clean)
plot(Price~log(Age), data=data_l_clean)
plot(Price~I(Miles/Age), data=data_l_clean)
plot(Price~I(Miles/Age), data=data_l_clean)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company+Horsepower:Age+Miles:Age, data = data_l_clean) #Include Miles per Year include miles from manufacturing
summary(model_l_int)
### adjusting model
model_l_int = lm(Price ~.-Brand-Model-Engine.Volume-Name-Company-Year+Horsepower:Age+Miles:Age, data = data_l_clean) #Include Miles per Year include miles from manufacturing
summary(model_l_int)
par(mfrow=c(2,2))
plot(model_l_int)
vif(model_l_int)
model_l_log = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company-Year+Horsepower:Age+Miles:Age, data = data_l_clean) #
summary(model_l_log)
plot(model_l_log)
model_l_log = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company-Year+Miles:Age, data = data_l_clean) #
summary(model_l_log)
external_data <- read.csv("medeinkomst.csv")
external_data
external_data <- read.csv("~/Documents/EC_utbildning/R/regression_analysis_R/data_preprocessed/")
external_data <- read.csv("~/Documents/EC_utbildning/R/regression_analysis_R/data_preprocessed/medeinkomst.csv")
external_data
medel_inkomst_lan <- external_data[grepl("län", external_data$region), ]
medel_inkomst_lan
unique(data_l_clean$Location)
medeinkomst <- list(
Stockholm = 415.4,
Dalarna = 313.3,
Västmanland = 325.1,
Skåne = 333.2,
Örebro = 312.1,
Kronoberg = 325.9,
Västernorrland = 314.0,
Göteborg = 337.6,
Kalmar = 309.8,
Södermanland = 318.5,
Halland = 363.8,
Blekinge = 313.1,
Älvsborg = 337.6,
Östergötland = 320.0,
Uppsala = 326.1,
Västerbotten = 317.4,
Jämtland = 325.9,
Skaraborg = 337.6,
Jönköping = 325.0,
Värmland = 316.6,
Norrbotten = 328.2,
Gävleborg = 312.2
)
head(data_l_clean)
library(dplyr)
# Converting the list to a named vector for easier mapping
medeinkomst_vector <- unlist(medeinkomst)
# Adding the Mean_income column
data_l_clean_1 <- data_l_clean %>%
mutate(Mean_income = medeinkomst_vector[Location])
# Print the updated dataframe to check
print(data_l_clean_1)
summary(data_l_clean_1)
model_l_log_ext = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company-Location+Miles:Year, data = data_l_clean_1) #
summary(model_l_log_ext)
par(mfrow=c(2,2))
plot(model_l_log_ext)
model_l_log_ext = lm(I(log(Price)) ~.-X-Brand-Model-Engine.Volume-Name-Company-Location-Year+Miles:Age, data = data_l_clean_1) #
summary(model_l_log_ext)
#Predict the values using the fitted model
predicted_values <- predict(model_l_log_ext, data_l_clean_1)
# Step 4: Create a new dataframe for plotting
plot_data <- data.frame(True_Pris = data_l_clean_1$Price, Predicted_Price = predicted_values, Län = data_l_clean_1$Horsepower)
# Step 5: Plot the true values vs. the predicted values
library(ggplot2)
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Pris, color = Län)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "True Prices", y = "Predicted Prices", title = "True vs. Predicted Prices by Län") +
theme_minimal()
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Price, color = Län)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "True Prices", y = "Predicted Prices", title = "True vs. Predicted Prices by Län") +
theme_minimal()
# Step 4: Create a new dataframe for plotting
plot_data <- data.frame(True_Pris = log(data_l_clean_1$Price), Predicted_Price = predicted_values, Län = data_l_clean_1$Horsepower)
# Step 5: Plot the true values vs. the predicted values
library(ggplot2)
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Price, color = Län)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "True Prices", y = "Predicted Prices", title = "True vs. Predicted Prices by Län") +
theme_minimal()
# Step 4: Create a new dataframe for plotting
plot_data <- data.frame(True_Pris = log(data_l_clean_1$Price), Predicted_Price = predicted_values, Län = data_l_clean_1$Location)
# Step 5: Plot the true values vs. the predicted values
library(ggplot2)
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Price, color = Län)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "True Prices", y = "Predicted Prices", title = "True vs. Predicted Prices by Län") +
theme_minimal()
# Step 4: Create a new dataframe for plotting
plot_data <- data.frame(True_Pris = log(data_l_clean_1$Price), Predicted_Price = predicted_values, Age = data_l_clean_1$Age)
# Step 5: Plot the true values vs. the predicted values
library(ggplot2)
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Price, color = Age)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "True Prices", y = "Predicted Prices", title = "True vs. Predicted Prices by Location") +
theme_minimal()
Location
Location
Location
# Step 4: Create a new dataframe for plotting
plot_data <- data.frame(True_Pris = log(data_l_clean_1$Price), Predicted_Price = predicted_values, Location = data_l_clean_1$Location)
# Step 5: Plot the true values vs. the predicted values
library(ggplot2)
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Price, color = Location)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "True Prices", y = "Predicted Prices", title = "True vs. Predicted Prices by Location") +
theme_minimal()
# Step 4: Create a new dataframe for plotting
plot_data <- data.frame(True_Pris = log(data_l_clean_1$Price), Predicted_Price = predicted_values, Location = data_l_clean_1$Location)
# Step 5: Plot the true values vs. the predicted values
library(ggplot2)
ggplot(plot_data, aes(x = True_Pris, y = Predicted_Price, color = Location)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Log True Prices", y = "Log Predicted Prices", title = "True vs. Predicted Prices by Location") +
theme_minimal()
